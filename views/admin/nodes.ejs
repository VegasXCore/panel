<%- include('../components/admin_template') %>
<main id="blursystem">
   <div class="bg-transparent">
      <div class="px-8 pt-4 sm:flex sm:items-center">
         <div class="sm:flex-auto">
           <h1 class="mb-4 text-base font-medium leading-6 text-white heavy"><%= req.translations.nodes %></h1>
         </div>
       </div>
       <% if (req.query.err=="none" ) { %>
        <div class="my-4 rounded-full shadow-sm border border-white/10 px-3 py-2 pt-2.5">
          <span class="text-white text-xs mt-0.5">
          <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="size-8 mb-0.5 text-indigo-300 rounded-full shadow-sm bg-indigo-500/15 p-1.5 mr-2.5 inline-flex">
            <path stroke-linecap="round" stroke-linejoin="round" d="m4.5 12.75 6 6 9-13.5" />
          </svg>
          Action completed - Node Have Been Created Successfully. 
          </span>
          </div>          
        <% } %>
    <% if (req.query.err == "EDITED") { %>
      <div class="my-4 rounded-full shadow-sm border border-white/10 px-3 py-2 pt-2.5">
        <span class="text-white text-xs mt-0.5">
        <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="size-8 mb-0.5 text-indigo-300 rounded-full shadow-sm bg-indigo-500/15 p-1.5 mr-2.5 inline-flex">
          <path stroke-linecap="round" stroke-linejoin="round" d="m4.5 12.75 6 6 9-13.5" />
        </svg>
        Action completed - Node Have Been Edited Successfully. 
        </span>
        </div> 
      <% } %>
      
      <div class="flex grid flex-col items-center grid-cols-12 gap-4 px-6 py-3 mt-6 text-sm font-medium text-white/50" id="nodeTable">
        <div class="col-span-2"><%= req.translations.name %></div>
        <div class="col-span-2">Status</div>
        <div class="col-span-2">Version</div>
        <div class="col-span-2"><%= req.translations.connection %></div>
        <div class="col-span-2"><%= req.translations.actions %></div>
        <div class="flex items-center gap-3"> <!-- Moved button and server list directly under "Instances" -->
          <!-- Button -->
          <% if (req.user.admin === true) { %>
           <!-- Actions -->
           <div class="flex items-center gap-3">
        <button id="createButton" type="button" class="flex items-center justify-center gap-2 px-5 text-sm font-medium text-white transition-all duration-200 bg-indigo-500 rounded-full shadow hover:scale-95 h-11 hover:bg-indigo-700 focus:ring-2 focus:ring-indigo-800 focus:ring-offset-2 ring-offset-gray-200 hover:shadow-none">
        
          <span>Create</span>
        
        </button>
        <button id="sedar" onclick="window.location.href='/scan/sedar'" type="button" class="flex items-center justify-center gap-2 px-5 text-sm font-medium text-white transition-all duration-200 bg-red-600 rounded-full shadow hover:scale-95 h-11 hover:bg-[#f80101] focus:ring-2 focus:ring-[#d00000] focus:ring-offset-2 ring-offset-gray-200 hover:shadow-none">
          <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="size-10">
            <path stroke-linecap="round" stroke-linejoin="round" d="M15.042 21.672 13.684 16.6m0 0-2.51 2.225.569-9.47 5.227 7.917-3.286-.672Zm-7.518-.267A8.25 8.25 0 1 1 20.25 10.5M8.288 14.212A5.25 5.25 0 1 1 17.25 10.5" />
          </svg>
          <span>Sedar Scan</span>
          
          </button>
        </div>
        </div>
        </div>
   </div>
          <% } %>

      
      <% nodes.forEach(function(node) { %>
      <div class="grid items-center grid-cols-12 gap-4 px-6 py-4 mb-4 transition border-2 border-transparent border-dashed cursor-pointer server-row bg-white/5 rounded-2xl hover:bg-white/10 hover:border-white/5">
              
              <!-- Server Name & Node -->
              <div class="col-span-2">
                  <div class="font-medium text-white"><%= node.name %></div>
              </div>

              <!-- Status -->

              <div class="col-span-2 ">
                  <div class="inline-flex items-center px-3 py-1 text-xs font-medium rounded-full bg-zinc-500/20 text-zinc-300">
                
                    <% if (node.status == "Online") { %>
                      <div class="flex items-center space-x-2">
                        <div class="flex items-center justify-center w-4 h-4 rounded-full bg-emerald-500/20">
                          <div class="w-2.5 h-2.5 rounded-full bg-emerald-500"></div>
                        </div>
                        <span class="text-sm text-emerald-300">Online</span>
                      </div>
                    <% } else if (node.status == "Offline") { %>
                      <div class="flex items-center space-x-2">
                        <div class="flex items-center justify-center w-4 h-4 rounded-full bg-red-500/20">
                          <div class="w-2.5 h-2.5 rounded-full bg-red-500"></div>
                        </div>
                        <span class="text-sm text-red-300">Offline</span>
                      </div>
                    <% } %>
                    
              </div>
              </div>

              <!-- Memory Usage -->
              <div class="col-span-2">
                <div class="flex items-center gap-2">
                    <span class="px-2 py-1 text-xs text-white rounded shadow-sm bg-zinc-500/20">
                        <code class="font-mono">
                          <%= (node.versionRelease || 'unknown').replace('HydraD ', '').trim() %>
                        </code>
                    </span>
                </div>
            </div>
            
            

              <!-- CPU Usage -->
              <div class="col-span-2">
                  <div class="flex items-center gap-2">
                    
                      <span data-status class="text-xs"><%= node.address %>:<%= node.port %></span>
                  </div>
              </div>

              <a class="flex items-center justify-center px-2 py-1 text-sm font-medium text-black bg-white rounded-full hover:bg-white hover:scale-95" href="/admin/node/<%= node.id %>">Edit</a>
              <button class="px-3 py-1 text-sm font-medium text-black bg-white rounded-full hover:bg-white hover:scale-95" onclick="configure('<%= node.id %>')">Configure</button>
              <button class="px-4 py-1 text-sm font-medium text-white bg-red-600 rounded-full hover:bg-red-700 hover:scale-95" onclick="deletenode('<%= node.id %>')">Remove</button>

          </div>
   <% }); %>
      <div id="nodeForm" class="hidden w-full px-8 mt-6">
        <div class="p-3 overflow-hidden bg-transparent shadow-xl rounded-xl sm:p-6 lg:p-10 card" style="width: 800px;">
            <form>
                <div class="grid grid-cols-2 gap-4">
                    <div>
                        <label for="nodeName" class="mb-2 text-sm tracking-tight text-white"><%= req.translations.name %>:</label>
                        <input id="nodeName" class="w-full px-4 py-2 mt-2 mb-4 text-sm text-white bg-gray-700 border rounded-xl focus:ring-transparent focus:border-transparent hover:bg-gray-700 placeholder:text-white/50 border-white/5" placeholder="My node">
                    </div>
    
                    <div>
                        <label for="nodeRam" class="mb-2 text-sm tracking-tight text-white"><%= req.translations.ram %> (GB):</label>
                        <input id="nodeRam" class="w-full px-4 py-2 mt-2 mb-6 text-sm text-white bg-gray-700 border rounded-xl focus:ring-transparent focus:border-transparent hover:bg-gray-700 placeholder:text-white/50 border-white/5" placeholder="This is only for information purposes.">
                    </div>
    
                    <div>
                        <label for="nodeDisk" class="mb-2 text-sm tracking-tight text-white"><%= req.translations.disk %> (GB):</label>
                        <input id="nodeDisk" class="w-full px-4 py-2 mt-2 mb-6 text-sm text-white bg-gray-700 border rounded-xl focus:ring-transparent focus:border-transparent hover:bg-gray-700 placeholder:text-white/50 border-white/5" placeholder="This is only for information purposes.">
                    </div>
    
                    <div>
                        <label for="nodeProcessor" class="mb-2 text-sm tracking-tight text-white"><%= req.translations.cpu %>:</label>
                        <input id="nodeProcessor" class="w-full px-4 py-2 mt-2 mb-6 text-sm text-white bg-gray-700 border rounded-xl focus:ring-transparent focus:border-transparent hover:bg-gray-700 placeholder:text-white/50 border-white/5" placeholder="This is only for information purposes.">
                    </div>
    
                    <div>
                        <label for="nodeAddress" class="mb-2 text-sm tracking-tight text-white"><%= req.translations.addressIP %>:</label>
                        <input id="nodeAddress" class="w-full px-4 py-2 mt-2 mb-6 text-sm text-white bg-gray-700 border rounded-xl focus:ring-transparent focus:border-transparent hover:bg-gray-700 placeholder:text-white/50 border-white/5" placeholder="192.168.1.1 or my.hostnamehere.com">
                    </div>
    
                    <div>
                        <label for="nodePort" class="mb-2 text-sm tracking-tight text-white"><%= req.translations.deamonPort %>:</label>
                        <input id="nodePort" class="w-full px-4 py-2 mt-2 mb-6 text-sm text-white bg-gray-700 border rounded-xl focus:ring-transparent focus:border-transparent hover:bg-gray-700 placeholder:text-white/50 border-white/5" placeholder="3000">
                    </div>
    
                    <div class="col-span-2">
                        <label for="tagInput" class="mb-2 text-sm tracking-tight text-white"><%= req.translations.tags %>:</label>
                        <div id="tagContainer" class="flex flex-wrap gap-2 mb-2"></div>
                        <input id="tagInput" class="w-full px-4 py-2 mt-2 mb-6 text-sm text-white bg-gray-700 border rounded-xl focus:ring-transparent focus:border-transparent hover:bg-gray-700 placeholder:text-white/50 border-white/5" placeholder="Add a tag and press Enter">
                    </div>
    
                    <div class="col-span-2">
                        <button id="createNodeBtn" type="button" class="px-4 py-2 text-sm font-medium text-white transition bg-blue-500 border border-blue-500 rounded-lg hover:bg-blue-600 hover:text-white focus:z-10 focus:ring-2 focus:ring-blue-600 focus:text-white">
                            <%= req.translations.create %>
                        </button>
                    </div>
                </div>
            </form>
        </div>
    </div>
    
      
</main>
</div>
<!-- Scan Modal -->
<div id="scanModal" class="fixed inset-0 z-50 flex items-center justify-center transition-opacity duration-300 ease-in-out bg-black bg-opacity-50 opacity-0 pointer-events-none">
  <div id="modalContent" class="relative max-w-sm overflow-hidden text-left transition bg-white rounded-lg shadow-lg">
    <div class="p-5 bg-white">
      <div class="flex items-center justify-center w-12 h-12 mx-auto bg-red-100 rounded-full shrink-0">
        <svg fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-6 h-6 text-red-600">
          <path stroke-linecap="round" stroke-linejoin="round" d="M12 9v3.75m-9.303 3.376c-.866 1.5.217 3.374 1.948 3.374h14.71c1.73 0 2.813-1.874 1.948-3.374L13.949 3.378c-.866-1.5-3.032-1.5-3.898 0L2.697 16.126zM12 15.75h.007v.008H12v-.008z"></path>
        </svg>
      </div>
      <div class="mt-3 text-center">
        <span class="text-lg font-semibold leading-6 text-gray-900">Suspended Servers</span>
        <p class="mt-2 text-sm leading-5 text-gray-500">The following servers have been suspended due to policy violations:</p>
      </div>
      <div id="suspendedServersList" class="mt-3 text-gray-600">
        <!-- Suspended servers will be dynamically populated here -->
      </div>
    </div>
    <div class="p-4 mt-3 bg-gray-50">
      <button type="button" onclick="hideScanModal()" class="inline-flex justify-center w-full px-4 py-2 text-sm font-medium leading-6 text-gray-700 bg-white border border-gray-300 rounded-md shadow-sm">Close</button>
    </div>
  </div>
</div>

<script>
  // Function to show and populate the scan modal
  document.addEventListener("DOMContentLoaded", function() {
    const urlParams = new URLSearchParams(window.location.search);
    const scan = urlParams.get('scan');
    const suspendedServersJSON = urlParams.get('suspendedServers') || [];
    
    if (scan === 'success' && suspendedServersJSON) {
      try {
        // Decode and parse the JSON string from the URL
        const suspendedServers = JSON.parse(decodeURIComponent(suspendedServersJSON)); 
        
        if (Array.isArray(suspendedServers) && suspendedServers.length > 0) {
          const suspendedServersList = document.getElementById('suspendedServersList');
          
          // Display the suspended servers as clean JSON
          const suspendedServersElement = document.createElement('pre');
          suspendedServersElement.classList.add('bg-gray-100', 'p-3', 'rounded-lg');
          suspendedServersElement.textContent = JSON.stringify(suspendedServers, null, 2) || []; // Pretty print the JSON
          
          suspendedServersList.appendChild(suspendedServersElement);
          
            // Show the modal
            const modal = document.getElementById('scanModal');
    const blur = document.getElementById('blursystem');
    const modalContent = document.getElementById('modalContent');
    
    modal.classList.remove('opacity-0', 'pointer-events-none');
    modalContent.classList.remove('scale-95', 'opacity-0');
        modalContent.classList.add('scale-100', 'opacity-100');
        blursystem.classList.add('blur-lg')
        }
      } catch (e) {
        console.error('Error parsing suspended servers:', e);
      }
    }
  });
      
async function deletenode(nodeId) {
  try {
    let response = await fetch('/nodes/delete', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({ nodeId })
    });

    let result = await response.json();

    if (response.ok) {
      alert('Node successfully deleted');
      window.location.reload();
    } else if (result.error === "There are instances on the node") {
      const confirmDelete = confirm('There are still instances on this node. Do you want to delete all instances and remove the node?');

      if (confirmDelete) {
        response = await fetch(`/nodes/delete?deleteinstances=true`, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({ nodeId })
        });

        result = await response.json();

        if (response.ok) {
          alert('Node and instances successfully deleted');
          window.location.reload();
        } 
      }
    }
  } catch (error) {
    console.error('Request failed:', error);
  }
}



  document.getElementById('createButton').addEventListener('click', function() {
    var table = document.getElementById('nodeTable');
    var form = document.getElementById('nodeForm');
    if (table.style.display !== 'none') {
      table.style.display = 'none';
      form.style.display = 'block';
    } else {
      table.style.display = 'block';
      form.style.display = 'none';
    }
  });

  async function configure(nodeId) {
    const response = await fetch(`/admin/node/${nodeId}/configure-command`);
    if (!response.ok) {
      throw new Error('Failed to fetch configure command');
    }
    const data = await response.json();
    showPopup(data.configureCommand);
  }

  function showPopup(command) {
    const popup = document.createElement('div');
    popup.style.position = 'fixed';
    popup.style.top = '50%';
    popup.style.left = '50%';
    popup.style.transform = 'translate(-50%, -50%)';
    popup.style.padding = '20px';
    popup.style.width = '550px';
    popup.style.height = 'auto';
    popup.style.maxHeight = '80vh';
    popup.style.borderRadius = '10px';
    popup.style.boxShadow = '0 0 10px rgba(0, 0, 0, 0.1)';
    popup.style.backgroundColor = '#fff';

    popup.classList.add('text-black', 'rounded-xl', 'shadow-xl');

    popup.innerHTML = `
        <div class="flex items-center justify-center mb-2" style="margin-top: 75px;">
    <svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" width="100" height="100" viewBox="0 0 48 48">
        <linearGradient id="1ayUTr30BaMDjOG69N2fSa_xTkoPEFGI0P7_gr1" x1="21.241" x2="3.541" y1="39.241" y2="21.541" gradientUnits="userSpaceOnUse">
            <stop offset=".108" stop-color="#0d7044"></stop>
            <stop offset=".433" stop-color="#11945a"></stop>
        </linearGradient>
        <path fill="url(#1ayUTr30BaMDjOG69N2fSa_xTkoPEFGI0P7_gr1)" d="M16.599,41.42L1.58,26.401c-0.774-0.774-0.774-2.028,0-2.802l4.019-4.019c0.774-0.774,2.028-0.774,2.802,0L23.42,34.599c0.774,0.774,0.774,2.028,0,2.802l-4.019,4.019C18.627,42.193,17.373,42.193,16.599,41.42z"></path>
        <linearGradient id="1ayUTr30BaMDjOG69N2fSb_xTkoPEFGI0P7_gr2" x1="-15.77" x2="26.403" y1="43.228" y2="43.228" gradientTransform="rotate(134.999 21.287 38.873)" gradientUnits="userSpaceOnUse">
            <stop offset="0" stop-color="#2ac782"></stop>
            <stop offset="1" stop-color="#21b876"></stop>
        </linearGradient>
        <path fill="url(#1ayUTr30BaMDjOG69N2fSb_xTkoPEFGI0P7_gr2)" d="M12.58,34.599L39.599,7.58c0.774-0.774,2.028-0.774,2.802,0l4.019,4.019c0.774,0.774,0.774,2.028,0,2.802L19.401,41.42c-0.774,0.774-2.028,0.774-2.802,0l-4.019-4.019C11.807,36.627,11.807,35.373,12.58,34.599z"></path>
    </svg>
</div>
<p class="mt-3 mb-2 font-bold text-black" style="font-size:30px; text-align:center">Token created.</p>
<h3 class="mb-5 text-black" style="text-align:center; margin-top: 25px;">To auto-configure your node, run the following command:</h3>
<pre class="p-3 mt-3 mb-4 status-gray rounded-xl" style="overflow-x: scroll"><code id="commandCode" class="text-emerald-500">${command}</code></pre>
<button id="doneBtn" class="block px-3 py-2 mt-4 text-sm font-medium text-center text-white transition bg-black shadow-lg rounded-xl focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-indigo-600">Done</button>

    `;
    document.body.appendChild(popup);

    const commandCode = document.getElementById('commandCode');
    commandCode.addEventListener('click', function() {
        const textarea = document.createElement('textarea');
        textarea.value = commandCode.textContent;
        document.body.appendChild(textarea);
        textarea.select();
        document.execCommand('copy');
        document.body.removeChild(textarea);
      const notification = document.getElementById('notification');
      notification.classList.remove('tranneutral-y-full', 'opacity-0');
      
      setTimeout(() => {
        notification.classList.add('tranneutral-y-full', 'opacity-0');
      }, 3000);
    });

    document.getElementById('doneBtn').addEventListener('click', function() {

        document.body.removeChild(popup);
    });
}

  function setupBadgeInput(inputId, containerId, validator) {
    const input = document.getElementById(inputId);
    const container = document.getElementById(containerId);

    function processInput() {
        const value = input.value.trim();

        const tags = value.split(',').map(tag => tag.trim()).filter(tag => tag !== '');

        let allValid = true;
        tags.forEach(tag => {
            if (tag !== '' && (!validator || validator(tag))) {
                createBadge(tag);
            } else {
                allValid = false;
            }
        });

        if (!allValid) {
            alert('Invalid format. Ports should be like this: 8080:8080 [external:internal]. For example, if you wanted to assign 8080 to the internal port 2022, you could do: 8080:2022.');
        }

        input.value = '';
    }

    input.addEventListener('blur', function() {
        processInput();
    });
    input.addEventListener('keypress', function(e) {
        if (e.key === 'Enter') {
            e.preventDefault();
            processInput();
        }
    });

    input.addEventListener('keypress', function(e) {
        if (e.key === 'Enter') {
            e.preventDefault();
            const value = input.value.trim();

            const tags = value.split(',').map(tag => tag.trim()).filter(tag => tag !== '');

            let allValid = true;
            tags.forEach(tag => {
                if (tag !== '' && (!validator || validator(tag))) {
                    createBadge(tag, container, input);
                } else {
                    allValid = false;
                }
            });

            if (!allValid) {
                alert('Invalid format. Ports should be like this: 8080:8080 [external:internal]. For example, if you wanted to assign 8080 to the internal port 2022, you could do: 8080:2022.');
            }

            input.value = '';
        }
    });


    function createBadge(text, container, inputField) {
    const badge = document.createElement('span');
    badge.className = 'bg-white/5 text-neutral-300 text-xs font-medium mr-1 px-2.5 py-0.5 rounded-xl';
    badge.textContent = text;

    const removeBtn = document.createElement('button');
    removeBtn.className = 'ml-2 text-neutral-600';
    removeBtn.textContent = '×';
    removeBtn.onclick = function() {
      container.removeChild(badge);
    };

    badge.appendChild(removeBtn);
    container.appendChild(badge);
    inputField.value = '';
  }
  }

  setupBadgeInput('tagInput', 'tagContainer');

  document.getElementById('createNodeBtn').addEventListener('click', function() {
    const name = document.getElementById('nodeName').value;
    const tags = Array.from(document.getElementById('tagContainer').children).map(badge => badge.textContent.slice(0, -1).trim());
    const ram = document.getElementById('nodeRam').value;
    const disk = document.getElementById('nodeDisk').value;
    const processor = document.getElementById('nodeProcessor').value;
    const address = document.getElementById('nodeAddress').value;
    const port = document.getElementById('nodePort').value;

    const nodeData = {
      name,
      tags: tags.join(' - '),
      ram,
      disk,
      processor,
      address,
      port
    };

    fetch('/nodes/create', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify(nodeData)
    })
    .then(response => {
      if (response.ok) {
        return response.json();
      }
      throw new Error('Failed to create node');
    })
    .then(data => {
      console.log('Node created:', data);
      window.location.href = '../admin/nodes?err=none'
    })
    .catch(error => alert('Error creating node:', error));
  });


  function showScanModal() {
    const modal = document.getElementById('scanModal');
    const blur = document.getElementById('blursystem');
    const modalContent = document.getElementById('modalContent');
    
    modal.classList.remove('opacity-0', 'pointer-events-none');
    
    setTimeout(() => {
        modalContent.classList.remove('scale-95', 'opacity-0');
        modalContent.classList.add('scale-100', 'opacity-100');
        blursystem.classList.add('blur-lg')
    }, 10);
}

function hideScanModal() {
    const modal = document.getElementById('scanModal');
    const modalContent = document.getElementById('modalContent');
    const blur = document.getElementById('blursystem');
    modalContent.classList.remove('scale-100', 'opacity-100');
    modalContent.classList.add('scale-95', 'opacity-0');
    blur.classList.remove('blur-lg')
    
    setTimeout(() => {
        modal.classList.add('opacity-0', 'pointer-events-none');
    }, 300);
}
  
</script>
<%- include('../components/footer') %>